[{"title":"《写给大家看的设计书》","date":"2017-11-18T00:29:19.000Z","path":"2017/11/18/《写给大家看的设计书》/","text":"四大基本原则对比：避免页面上的元素太过相似（字体、颜色、大小、线宽、形状、空间等） //让页面引人注目 重复：让设计中的视觉要素在整个作品中重复出现。 //增加条理性，加强统一性。 对齐：每个元素都应当与页面上的另一个元素有某种视觉联系。 //建立清晰、清爽的外观 亲密性：彼此相关的项应当靠近，归组在一起，成为一个视觉单元。 //有助于组织信息，减少混乱，为读者提供清晰的结构 亲密性物理位置的接近就意味着关联。距离的多少决定了关联性的强弱，如同一块内容标题与正文的距离应该比标题与上一块内容的距离要小。 把有关联的元素放在一起，然后在不同的单元之间增加合适的空间，就让信息变得更直观。 1.p11图 2.p12图 对齐任何元素都不能在页面上随意安放，每一项都应当与页面上的某个内容存在某种视觉联系。 如果页面上的某些项是对齐的，即使对齐的元素物理位置是彼此分离的，但在读者眼里也会有一条线把它们连在一起。尽量减少居中对齐的使用，多采用结合明确地右对齐或左对齐。 如果使用居中对齐，可以增加一些小技巧，如将文本块不居中。在得到更多培训之前，保证页面上只使用一种文本对齐方式。 绝对不要在左对齐或缩进的文本上方将标题居中。第一段不缩进。缩进长度最好为1em。*在完成常规的对齐工作后有意识地打破对齐。在打破规则前必须清楚规则是什么。 重复设计的某些方面需要在真个作品中重复","tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://yoursite.com/tags/读书笔记/"}]},{"title":"JAVAEE 基础知识总结","date":"2017-11-12T06:48:18.000Z","path":"2017/11/12/JAVAEE-基础知识总结/","text":"JAVAEE基础知识总结注：本总结是基于c语言的补充 JRE和JDK JDK（java开发工具包）：JRE+开发工具 JRE（java运行环境）：JVM+核心类库 JVM（java虚拟机）：保证语言的跨平台性，针对不同操作系统搭建不同的JVM 类与对象类是对象的蓝图类的结构：实例变量（状态）;方法（行为） 成员变量（类中、方法外）定义即有初始值。局部变量（方法中、方法声明，包括main）定义无初始值。if、for等语句中定义的变量同样为局部变量 构造方法：（与类名相同，没有返回类型）默认无参构造：public Student() {} //Student与类名相同 初始化：Student s = new Student();带参构造： public Student(String name,int age) { this.name = name; this.age = age; } 初始化：Student s2 = new Student(“赵丽颖”,18);创建子类对象时会自动调用父辈的构造函数：1.系统在子类的构造函数中自动补充super();必须在最上行，即构造函数的执行顺序为父类-&gt;子类2.只调用没有参数的构造函数。若设定好的构造函数有参数，则可以用this();调用带参数的构造函数。必须在最上行，所以this()与super()不能同时存在。例：123456789101112class Mini extends …………&#123;…………public Mini() //默认不带参数的构造函数，会被子类构造函数自动调用 &#123; this(Color.Red); //用this()调用需要的带参的构造函数 &#125;public Mini(Color c)&#123; super(\"Mini\"); //真正的构造函数 color = c;&#125; 实例变量存储在类所属的堆空间上，局部变量存储在栈上 常用语句及导包123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869import java.util.Random; //包含random语句import java.util.Scanner; //包含Scanner语句import java.util.Date; //取得当前时间import java.util.Calendar; //操作时间import javax.sound.midi.*; //音乐包import java.io.*; //IO流class Lozenge&#123; int i,j; //实例变量（状态） void draw()&#123; //方法（行为） ……………… &#125;public class ClassName&#123; //classname必须与创建的java文件名字相同 public static void main(String[] args)&#123; System.out.println(\"HelloWorld\"); Lozenge l = new Lozenge(); //声明引用类 double a = 32.24242424; System.out.format(\"%.2f\",a); //保留小数点后几位。固定格式，括号内用“，”分隔，无换行功能。 String.format(\"%,d\",1000000000); //格式化数字。这里表示用,进行格式化，结果为1,000,000,000. %c可输出对应ASCILL码值对应字符 Scanner sc = new Scanner(System.in); //创建键盘录入数据的对象 l.i = sc.nextInt(); //输入变量,根据变量类型改变Int String s1 = new String(\"hello\"); //字符串定义 char[] chs = &#123;'h','e','l','l','o'&#125;; String s2 = new String(chs); //字符数组封装成字符串 String s3 = new String(chs,1,3); //String(char[] value, int index, int count):把字符数组中的一部分数据封装成字符串对象 String s4 = \"hello\"; int a=1,b=2; String str = \"\"+a+b; //多个整型直接转换为字符串 System.out.println(\"请输入一个字符串数据：\"); //字符串输入 String s = sc.nextLine(); //nextLine()可以输入空格和tab换行，只以回车为间隔。next以空格、tab和回车为间隔，可以利用空格、tab间隔同时输入多个字符串 Random r = new Random(); //随机数 int number = r.nextInt(10); //产生数据在0到10之间，包括0不包括10 int[] arr = new int[a]; //数组的动态定义,可以用变量定义数组长度 int[] arr = new int[]&#123;1,2,3&#125;; int[] arr = &#123;1,2,3&#125;; //数组的静态定义 int[][] arr = &#123; &#123; 1, 2, 3 &#125;, &#123; 4, 5, 6 &#125;, &#123; 7, 8, 9 &#125; &#125;; //二维数组的静态定义 arr.length和arr[n].length可直接用 short s=(short)(i+d); //强制转换 for(int i : arr) //for的加强版循环，等价于int i = 0;i&lt;arr.length;i++ &#123; ; &#125; FileWriter fw = new FileWriter(\"d:\\\\a.txt\"); //调用系统资源创建了一个文件、创建输出流对、把输出流对象指向文件 fw.write(\"IO流你好\"); //调用输出流对象的写数据的方法、写一个字符串数据 fw.flush(); //数据没有直接写到文件，其实是写到了内存缓冲区（流对象还可以继续使用） fw.close(); //释放资源、通知系统释放和该文件相关的资源（流对象不可以再被使用了） FileReader fr2 = new FileReader(\"b.txt\"); //读取数据 int ch; while((ch=fr2.read())!=-1) &#123; System.out.print((char)ch); &#125; fr2.close(); System.exit(0); //关闭程序 &#125;&#125; 标识符规定： 下划线_、美元符$和字符组成 不能以数字开头，不能为java关键字 命名规则： 包（文件夹）：全部小写，多级用点隔开 例： cn.itcast （cn\\itcast） 类： 单词首字母大写 例： HelloWorld 变量、方法： 一个单词全部为小写 多个单词从第二个单词开始首字母大写 例： maxAge getAge() 自定义的常量： 全部大写 例： PI; 数据类型 类型名 字节 数据表示范围 备注 byte 1 -128~127 short 2 -32768~32767 int 4 -2147483648~2147483647 long 8 -2^63~(2^63)-1 6000000000L float 4 -3.403E38~3.403E 12.34F double 8 -1.798E308~1.798E308~1 char 2 Java中的字符采用的是Unicode字符集，每一个字符占用两个字节，可以存储一个汉字 boolean 1 类型转换 boolean不能转换为其他数据类型 byte.short.char相互之间不转换，参与运算首先转换为int类型 说明：byte变量+short变量结果为整型变量，用short或byte存储会损失精度无法编译 按照变量量级，高级别相加结果不能存储在低级别量级变量中 例：byte变量+int变量无法存储在int量级一下变量 double级运算结果无法存储在float变量中 从小到大自动类型转换：byte,short,char—&gt;int—&gt;long—&gt;float—&gt;double 例：float a = 2000L // a = 2000.0 运算符补充+: 字符相加结果默认为ASCill码值相加 字符串参与加法，“+”起拼接作用：例子：10 + “abc” +20 = “10abc20” 10 + 20 + “abc” = “30abc” ++、–：与C完全一样 &amp;&amp;和&amp;的区别：单&amp;时，右边都进行运算；双&amp;时，左边为真则继续运算。||和|的区别：单|时，右边都进行运算；双|时，左边为假则继续运算。 static与final静态方法与非静态方法的区别：静态方法不需要且不能使用实例变量，也不能调用非静态方法。同一类所有实例共享一份静态变量，静态变量在类的创建前及类的静态方法执行前完成初始化。 final：定义方法代表方法不可被覆盖，定义类代表类不可以被继承。public static final double PI = 3.14 //定义常数，final表示定义完之后值不可更改 方法格式：修饰符 返回值类型 方法名(参数类型参数名1，参数类型参数名2…) { 方法体; return 返回值;}例：public static int sum(int a,int b){ return a + b; } 方法重载：概述：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。特点：与返回值类型无关，只看方法名和参数列表，还可以更改存取权限 常用方法： 字符判断：返回布尔值 str1.name(str2); equals(Object obj):比较字符串的内容是否相同 equalsIgnoreCase(String str):比较字符串的内容是否相同,忽略大小写 startsWith(String str):判断字符串对象是否以指定的str开头 endsWith(String str):判断字符串对象是否以指定的str结尾 获取功能： int length():获取字符串的长度 char charAt(int index):获取指定索引处的字符 int indexOf(String str):获取str在字符串对象中第一次出现的索引,没有返回-1 String substring(int start):从start开始截取字符串到字符串结尾 String substring(int start,int end):从start开始，到end结束截取字符串;包括start，不包括end 转换功能： char[] toCharArray():把字符串转换为字符数组 String toLowerCase():把字符串转换为小写字符串 String toUpperCase():把字符串转换为大写字符串 String trim()去除字符串两端空格 String[] split(String str)按照指定符号分割字符串 例：String s4 = “aa,bb,cc”; String[] strArray = s4.split(“,”); 替换功能方法：String replace(char oldChar,char newChar)替换字符串中的单个字符String replace(CharSequence oldStr, CharSequence newStr)替换字符串中的指定内容 常用Math方法：Math. IO流导包：import java.io.*;FileWriter方法： void write(String str):写一个字符串数据 void write(String str,int index,int len):写一个字符串中的一部分数据, index:开始索引,len:写几个 void write(int ch):写一个字符数据,这里写int类型的好处是既可以写char类型的数据，也可以写char对应的int类型的值。’a’,97 void write(char[] chs):写一个字符数组数据 void write(char[] chs,int index,int len):写一个字符数组的一部分数据, index:开始索引,len:写几个 FileWriter(String fileName, boolean append)：第一个参数:写入文件的目的地 第二个参数:append作用（true:可以续写 false:不能续写,覆盖之前的文件）FileReader方法： int read()读取单个字符并返回 int read(char[] cbuf)一次读取一个字符数组的数据，返回的是实际读取的字符个数 例：FileReader fr = new FileReader(“b.txt”); char[] chs = new char[1024]; //这里可以是1024及其整数倍 int len; while((len=fr.read(chs))!=-1) { System.out.print(new String(chs,0,len)); } fr.close(); 换行：\\r\\n 继承public class 子类名称 extends 父类名称 implements 接口名称{} public成员会被继承，private成员不会 子类可以扩展或者覆盖父类的方法属性，在子类的public void name(){}中添加super.name()可以先继承父类全部name方法语句 实例变量只能被继承不能覆盖 某个方法在子类中被覆盖过，调用这个方法时会调用覆盖过的版本。 多态：可以在父类变量定义时进行子类的初始化 例：Animal name = new Dog(); 覆盖的规则：子类的方法参数及返回类型必须与父类一致，不能降低方法的存取权限（如public-&gt;private） 接口：用于对有相同性质的一部分子类给予特定性质的属性，定义：public interface Name{……} 注意：接口的方法为抽象的，没有内容 父类对象无法使用接口函数abstract: 放置在类前，防止类被初始化，多用于父类等抽象类。放置在方法前，代表此方法一定要被覆盖过。不能在非抽象类中拥有抽象方法。final：标记方法表示方法不能被覆盖 封装（数据隐藏）将实例变量标记为private，将getters与setters标记为public例：1234567891011121314151617class LiZi&#123; private int x; public int getX()&#123; //负责调用 return x; &#125; public void setX(int s)&#123; //负责输入值时的安全检查 if(s&gt;0) x=s; else syestem.out.println(\"非法\"); &#125; ……………… LiZi l = new LiZi(); l.setX(20); int a = 10 + l.getX(); ………………&#125; 特殊关键字用法this：this.name调用类成员变量，可以区分与之同名的局部变量。 StringBuilder类与String的区别：String是固定的，StringBuilder是可变的。如字符串拼接，使用String需要不停分配新空间。方法： 添加功能：public StringBuilder append(任意类型):添加数据，并返回自身对象 反转功能：public StringBuilderreverse() 转换为String：public String toString() ArrayList 集合类包：import java.util.ArrayList;功能：提供一个类的优化数组，可执行数组基本操作及删除基本用法：java.util.ArrayList;12345678910111213141516171819202122class Student&#123; String name = new String(); //先建立类 int score;&#125;public class Test&#123; public static void main(String[] args)&#123; ArrayList&lt;Student&gt; myList = new ArrayList&lt;Student&gt;(); for(int i=0;i&lt;10;i++)&#123; //可以用循环建立ArrayList数组，但Student a = new Student();须挪到循环内，否则建立的数组成员全部为a，属性完全一样 Student a = new Student(); a.name = &quot;Student&quot;+i; //用循环建立的ArrayList数组没有对应的类变量，只能通过myList.get(n)来访问 a.score = 200+i; myList.add(a); // public void add(int index,E element):在指定的索引处添加一个元素 &#125; int theSize = myList.size(); //读取数组长度 int idx = myList.indexOf(classname a); //查询特定类成员在数组中的位置，用于非循环手动添加建立的ArrayList数组 myList.remove(0); //删除元素既可以使用对应数组索引int，也可以使用对应类变量名如a System.out.println(myList.get(idx).name); //通过myList.get(n)调用数组元素 &#125;&#125; 补充方法： public E set(int index,E element):修改指定索引处的元素，返回被修改的元素注：对于基本数据类型集合是不存储的,因此不能写int,但是可以存储基本类型的包装类型Integer.(针对java5.0以前版本)例：list.add(1);Integer i = list.get(1);","tags":[{"name":"知识梳理","slug":"知识梳理","permalink":"http://yoursite.com/tags/知识梳理/"}]},{"title":"HTML与CSS 基础知识总结","date":"2017-11-08T12:09:49.000Z","path":"2017/11/08/HTML与CSS-基础知识总结/","text":"HTML与CSS 基础知识总结编写HTMl与CSS时需要养成的习惯：1.先套用Normalize.css，增强网页的兼容性2.注意规范化命名标签和清晰简明的注释，还有代码排版3.规范每个元素的属性排列顺序4.注意网站文件的存储结构 html的基本结构12345678910111213141516&lt;!DOCTYPE html&gt; //注明标准为h5&lt;html lang=\"en\"&gt; //语言选择&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; //编码方式 &lt;title&gt;title&lt;/title&gt; //网页标题 &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"……\"&gt; //链接css文件，用于多个网页或者套用模板。依照文件独特性优先级，独特性越高越靠下 &lt;style type=\"text/css\"&gt; //用于单个网页内的css样式改变 &#123; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&lt;/body&gt;&lt;/html&gt; 常用元素功能及常用属性一览&lt;h&gt; &lt;/h&gt; 标题，块元素。字体从大到小有h1~h5，可自行更改样式&lt;p&gt; &lt;/p&gt; 常用的段落元素，块元素。&lt;a&gt; &lt;/a&gt; 元素：内联元素 块元素和空元素块元素：生成元素框，填充父元素的内容区，前后自带分隔 内联元素：生成元素框，不会打破文本结构 空元素：没有内容和结束标记 css基础语法selector{ property:value}例：h1{color:red;font-size:14px;}属性大于1个之后，属性之间用分号隔开p{font-family:”sans serif”;}值大于一个单词，需要加上引号 选择器派生选择器：改变特定父元素内的子元素属性例：li strong{ ……………………} id选择器：改变指定id标签元素属性。id唯一例： #divid{ ………………} 类选择器：改变指定类标签元素属性。类可重复使用例：.classname{ ……………………} 属性选择器：按照指定属性进行样式更改 在ie6及更低版本不支持例：[title]{ } [title=te]{} CSS基本样式CSS背景 background-attachment: 背景图像是否固定或随着页面其余部分滚动 background-color：设置元素背景颜色 background-image：把图片设置为背景 background-position：设置背景图片起始位置 background-repeat： 设置背景图片是否及如何重复 css3背景： background-size: 规定尺寸 background-origin: 规定定位区域 background-clip: 规定绘制区域 CSS文本line-height:行高 letter-spacing:字符间距 text-align:对齐方式 text-decoration:文本修饰text-indent:缩进文本首行 text-transform:元素中的字母（大小写） unicode-bidi:文本方向 white-space:空白处理方式word-spacing:字间距 css3文本效果：text-shadow: 文本阴影 5px 5px 1px #FF0000 距左，距上，阴影厚度，颜色word-wrap: 文本换行规则(需要规定width) CSS字体font-family: 设置字体系列 font-size： 尺寸 font-style：风格font-weight: 粗细 font-variant: 小型大写字体或正常字体 自定义字体@font-face{ font-family: myfont; src: url();} CSS链接四种状态： a:link :未被访问的链接 a:visited :已访问过的链接 a:hover :鼠标位于链接上方时 a:active :链接被点击时 CSS列表 list-style: 简写列表项 list-style-image: 列表项图像 list-style-position: 列表标志位置 list-style-type: 列表类型 CSS表格border-collapse:合并边框(针对tb)可通过相隔两行设置同样背景颜色进行修饰区分 CSS轮廓outline:设置轮廓属性outline-color:颜色outline-style:样式outline-width:宽度 CSS盒子模型组成部分：margin padding border content 边框：border-radius:圆角边框 box-shadow:边框阴影 border-image:边框图片 外边距合并原则：取二者外边距最大值 CSS定位定位机制：普通流 浮动 绝对布局 属性：position: 把元素放在静态的/相对而/绝对的/固定的位置中top、left、right、bottom:偏移量clip:元素显示形状vertical-align:垂直对齐方式z-index:堆叠顺序","tags":[{"name":"知识梳理","slug":"知识梳理","permalink":"http://yoursite.com/tags/知识梳理/"}]},{"title":"Hello World","date":"2017-11-08T07:09:38.078Z","path":"2017/11/08/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]